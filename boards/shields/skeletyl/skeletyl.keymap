/*
 * Copyright (c) 2023 Charly Delay <0xcharly>
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define COLEMAK 0
#define LOWER 1
#define RAISE 2
#define EXTEND 3

&lt {
    quick_tap_ms = <200>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        QW_ESC {
            bindings = <&kp ESC>;
            key-positions = <1 0>;
            layers = <0>;
        };

        CAPS_WORD {
            bindings = <&caps_word>;
            key-positions = <23 26>;
            layers = <0>;
        };

        THUMB_DOT {
            bindings = <&kp PERIOD>;
            key-positions = <41 40 31 32>;
            layers = <1>;
        };

        LEFTSHIFT {
            bindings = <&kp LSHIFT>;
            key-positions = <11 12>;
            layers = <0>;
        };

        RIGHTSHIFT {
            bindings = <&kp RSHIFT>;
            key-positions = <18 17>;
            layers = <0>;
        };
    };

    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        /** Traditional Colemak layout. */

        colemak {
            bindings = <
  &kp Q       &kp W       &kp F        &kp P         &kp B          &kp J      &kp L         &kp U            &kp Y            &kp SQT
  &kp A       &kp R       &kp S        &kp T         &kp G          &kp M      &kp N         &kp E            &kp I            &kp O
  &bhm LGUI Z  &bhm LALT X  &bhm LCTRL C  &bhm LSHIFT D  &bhm LCTRL V    &kp K      &bhm RSHIFT H  &bhm RCTRL COMMA  &bhm RALT PERIOD  &bhm RGUI FSLH
                          &kp ESC      &kp SPACE     &lt 2 TAB      &kp ENTER  &lt 1 BSPC    &kp DEL
            >;
        };

        lower {
            bindings = <
  &kp LBKT        &kp N7       &kp N8        &kp N9         &kp RBKT     &kp PG_UP  &kp HOME    &kp UP     &kp END    &kp LS(LG(NUMBER_3))
  &kp SEMI        &kp N4       &kp N5        &kp N6         &kp EQUAL    &kp CAPS   &kp LEFT    &kp DOWN   &kp RIGHT  &kp INS
  &bhm LGUI GRAVE  &bhm LALT N1  &bhm LCTRL N2  &bhm LSHIFT N3  &kp BSLH     &kp PG_DN  &kp RSHIFT  &kp RCTRL  &kp RALT   &kp RGUI
                               &kp DOT       &kp MINUS      &lt 2 N0     &trans     &trans      &trans
            >;
        };

        raise {
            bindings = <
  &kp C_PREV          &kp C_PP        &kp C_NEXT       &kp C_MUTE        &none            &none   &kp F7         &kp F8        &kp F9       &kp F10
  &none               &none           &none            &none             &kp LC(SPACE)    &none   &kp F4         &kp F5        &kp F6       &kp F11
  &bhm LGUI LC(LS(Z))  &bhm LALT LC(V)  &bhm LCTRL LS(C)  &bhm LSHIFT LC(X)  &kp LC(Z)        &none   &bhm RSHIFT F1  &bhm RCTRL F2  &bhm RALT F3  &bhm RGUI F12
                                      &trans           &none             &trans           &trans  &trans         &trans
            >;
        };

        extend {
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
  &none         &none         &none         &none         &bt BT_CLR      &bt BT_CLR    &none         &none         &none         &none
  &none         &bt BT_PRV    &sys_reset    &bt BT_NXT    &bootloader     &bootloader   &bt BT_NXT    &sys_reset    &bt BT_PRV    &none
                              &trans        &trans        &trans          &trans        &trans        &trans
            >;
        };
    };
};
